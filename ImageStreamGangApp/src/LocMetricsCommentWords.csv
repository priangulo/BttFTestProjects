Word,Count
*,478
the,385
to,184
,175
a,141
//,139
of,131
and,77
in,64
image,55
that,52
list,49
is,43
method,42
for,40
an,39
images,35
from,34
filter,32
each,31
return,31
URLs,30
with,29
URL,29
all,28
be,28
->,27
This,26
@a,25
Use,24
input,24
stream,24
into,23
results,23
test,22
this,21
download,21
The,21
=,20
Returns,19
Image,19
class,19
as,18
catch,18
which,18
Create,18
Java,17
file,17
new,17
thread,17
store,17
{,16
filters,16
List,16
hook,16
pool,16
block,16
Auto-generated,15
name,15
TODO,15
concurrently,15
blocking,15
it,15
A,14
data,14
implementation,14
when,13
by,13
futures,13
result,13
Convert,13
use,12
completable,12
map(),12
common,12
processing,12
used,12
filtered,12
output,11
.stream(),11
pattern,11
can,11
Return,11
url,11
Constructor,11
are,11
source,10
apply,10
will,10
CompletableFuture,10
initializes,10
if,10
role,9
array,9
\process,\,9
cached,9
timing,9
has,9
through,9
},9
run,9
8,9
on,9
\download,\,9
default,9
object,9
+,9
already,9
ImageStreamGang,9
Filter,8
operations,8
its,8
stored,8
track,8
local,8
Iterate,8
process,8
parameter,8
appropriate,8
Get,8
tasks,7
via,7
containing,7
asynchronously,7
superclass,7
@throws,7
.collect(toList());,7
whose,7
constructor,7
them,7
Method,7
@return,7
call,7
returns,7
directory,7
Print,7
Asynchronously,7
Store,7
Template,7
supplier,7
false,6
sequentially,6
completes,6
cycle,6
time,6
or,6
whether,6
mFilters,6
expression,6
byte,6
\"\\,6
downloaded,6
should,6
type,6
CompletableFutures,6
Keeps,6
fork/join,6
strategy,6
lists,6
map,6
create,6
complete,6
one,6
FilterDecoratorWithImage,6
else,6
true,6
An,6
future,5
next,5
\Class"\\,5
abstract,5
executed,5
was,5
strategies,5
objects,5
so,5
\i.e.,\,5
values,5
filter(),5
template,5
done,5
count,5
Factory,5
also,5
only,5
\that,\,5
after,5
entry,5
associated,5
sequential,5
futureList,5
Constructs,5
applied,5
how,5
grayscale,5
given,5
runs,5
been,5
Decorator,5
must,5
private,5
customizes,5
\"\Concrete\,5
supplied,4
imageEntity,4
argument,4
\normally,\,4
URL),4
join(),4
\(i.e.,\,4
CompletionStage,4
\locally,\,4
members,4
methods,4
out,4
Terminate,4
getInput(),4
completed,4
tag,4
non-cached,4
collect,4
singleton,4
lambda,4
Invoke,4
Initialize,4
Construct,4
\makeFilterDecoratorWithImage(filter,\,4
wait,4
applyFilter(),4
stage,4
tree,4
.map(filter,4
size,4
utility,4
.filter(StreamsUtils.not(this::urlCached)),4
transform,4
that's,4
subclass,4
enables,4
Set,4
msecs,4
remote,4
string,4
};,4
define,4
makes,4
listOfFutures,4
stage's,4
set,4
ignore,4
uses,4
member,4
ExecutionException,3
we,3
other,3
get,3
overridden,3
always,3
have,3
number,3
Apply,3
files,3
at,3
\cache,\,3
(Exception,3
Plays,3
T,3
write,3
framework,3
original,3
threads,3
If,3
Creates,3
Hook,3
try,3
directories,3
Executor,3
then,3
@param,3
form,3
times,3
downloading,3
flatMap(),3
Lists,3
\"\Abstract\,3
stores,3
needed,3
image)),3
adapter,3
Bitmap,3
throwAsUnchecked(exception);,3
Default,3
Iterator,3
Start,3
user,3
versions,3
more,3
final,3
runnable,3
we're,3
(which,3
factory,3
start,3
encapsulate,3
value,3
helper,3
constructed,3
long,3
gang,3
either,3
returned,3
passed,3
Sets,3
ResultMap,3
strings,3
InterruptedException,3
using,3
multiple,3
plays,3
Note,3
OutputFilterDecorator,3
joined,3
(or,3
exception),3
generic,3
Run,3
up,3
listOfMaps,3
filename,3
Input,3
fastest,3
.parallelStream(),3
available,2
Runnables,2
uncheck((),2
resources,2
submit/run,2
>,2
.map(this::downloadImageAsync),2
ExecutorService,2
Supplier,2
ForkJoin,2
Logging,2
decorated,2
naming,2
see,2
algorithm,2
});,2
List<ResultMap>,2
behavior,2
regular,2
managedBlock,2
.count();,2
\source,\,2
different,2
without,2
(),2
being,2
order,2
pixel-by-pixel,2
exit,2
version,2
delete,2
finishes,2
\reqWidth,\,2
generated,2
\imageData.length,\,2
obtained,2
resource,2
0,2
null;,2
device,2
filter.getName())),2
calls,2
box,2
buffer,2
\image,\,2
Submit,2
corresponding,2
efficiently,2
import,2
they,2
open),2
StreamGang,2
perform,2
main,2
elements,2
command-line,2
imageData,2
\urlCached(url,\,2
Runnable,2
global,2
computer,2
Stop,2
.collect(toList()));,2
\map,\,2
check,2
filter/image,2
i,2
app,2
displayed,2
pixel,2
processed,2
Gets,2
Delete,2
negation,2
add,2
\processed,\,2
console,2
defaults,2
Replace,2
It,2
path,2
application,2
super,2
GrayScaleFilter,2
code,2
List<Image>,2
exists,2
contains,2
followed,2
NullFilter,2
network,2
obtain,2
inherited,2
Filters,2
selects,2
iteration,2
\Class.forName("\xxx"\));\,2
debugging,2
fields,2
instance,2
field,2
decorator,2
Check,2
does,2
ran,2
predicate,2
\finished,\,2
execution,2
\BitmapFactory.decodeByteArray(imageData,\,2
get(),2
Suppliers,2
refer,2
Decode,2
Stream,2
tests,2
means,2
Keep,2
efficient,2
inSampleSize,2
contents,2
imageFuture.thenApply(image,2
getExecutor());,2
point,2
many,2
.filter(filter,2
executor's,2
TreeMaps,2
Collect,2
.map(FilterDecoratorWithImage::run);,2
platform,2
blocks,2
t,2
another,2
conversion,2
raw,2
Perform,2
contain,2
asynchronous,2
slowest,2
handle,2
\0,\,2
Thread,2
sorted,2
options.inJustDecodeBounds,2
ImageStreamCompletableFutureBase,2
List<CompletableFuture<Image>>,2
synchronously,2
features,2
well,2
both,2
options);,2
key,2
creates,2
Options,2
subclasses,2
imageFuture,2
numberOfRuns),2
Decodes,2
convert,2
usable,2
.flatMap(this::applyFilters),2
Arrays,2
Streams,2
Make,2
int,2
\IntStream.range(0,\,2
parallelstream,2
decorate(),2
bitmap,2
until,2
any,2
there,2
some,2
first,2
.forEach(treeIndex,2
Calls,2
negate,1
\calculateInSampleSize(options,\,1
passes,1
submitted,1
failed,1
consumer.accept(t);,1
\downloadImage(url),\,1
.join(),1
(used,1
system,1
\class"\\,1
specified,1
(entry,1
Takes,1
sMAX_THREADS,1
makeInputList(),1
doesn't,1
System.out.println(TAG,1
Constructors,1
It's,1
numChildViews;,1
child,1
hold,1
separated,1
current,1
interface,1
explanation,1
want,1
under,1
place,1
program,1
initiating,1
Arrays.stream(urlsArray),1
\"\Try-with-resources"\\,1
iterator,1
\Component"\\,1
getExecutor())));,1
stringOfUrls,1
variableNumberOfInputURLs.add,1
res/drawable/,1
\tasks,\,1
false),1
show,1
\"\UTF-8"\))),\,1
functional,1
filterName,1
\code,\,1
mFilter,1
Determine,1
integrate,1
map.put(entry.getValue(),1
change,1
(Consumer<T>),1
BlockingTask.callInManagedBlock((),1
split,1
over,1
Dimensions,1
IOException,1
\example,\,1
Stream.generate(ResultMap::new).limit(numberOfRuns).collect(toList());,1
retrieves,1
\succeeded,\,1
compiler,1
function.apply(t);,1
ResultMap();,1
Calculate,1
\Decorator"\\,1
\.get(treeIndex),\,1
avoid,1
dispatches,1
platform-specific,1
Returned,1
separator,1
Helpful,1
itself,1
\msecs"\));\,1
Defines,1
found,1
your,1
System.out.println(Class.forName(name))));,1
logging,1
subdirectory,1
enumeration,1
default_local,1
\reference,\,1
automatically,1
handles,1
support,1
Increment,1
TreeMap,1
UI,1
\files,\,1
shutdown(),1
.map(Arrays::asList),1
allImagesDone,1
our,1
happy,1
ensures,1
function.get();,1
.splitAsStream(stringOfUrls),1
CompletableFuture<List<T>>,1
it's,1
reference,1
.forEach(rethrowConsumer(ClassNameUtil::println));,1
Map,1
\"\,"\\,1
\CompletableFuture.supplyAsync(filter::run,\,1
StringJoiner(new,1
When,1
.map(ImageStreamGang::downloadImage),1
UNDERSCORE,1
subclass),1
initiate,1
\URL),\,1
initiates,1
.stream(e.getEnumConstants()),1
BitmapFactory.Options,1
\107},\,1
run(),1
such,1
.map(this::applyFiltersAsync),1
@code,1
Tasks,1
prevents,1
\"\calling\,1
Debugging,1
.map(url,1
opposed,1
Thread.currentThread());,1
names,1
CompletableFuture.supplyAsync((),1
reuse,1
currently,1
custom,1
.forEach(rethrowConsumer(name,1
format,1
entry.getValue(),1
(defaults,1
\directory,\,1
took,1
urlCached,1
Enumerated,1
Super,1
would,1
last,1
just,1
filtering,1
.map(this::convertStringToUrls),1
res).limit(numberOfRuns).collect(toList());,1
fixed-size,1
sup,1
res,1
suggestion,1
located,1
main(),1
iff,1
Iterates,1
(convertStringToUrls(child.getText().toString()));,1
<,1
1),1
sets,1
initialize,1
3x3,1
file-related,1
designated,1
managedBlock(),1
excessive,1
\images,\,1
manipulating,1
Only,1
including,1
Each,1
described,1
need,1
exemplify,1
continue,1
running,1
\ForkJoinPool,\,1
but,1
Converts,1
override,1
transparently,1
en.wikipedia.org/wiki/Grayscale,1
List<CompletableFuture<List<Image>>>,1
make,1
listT.add(cf.join());,1
got,1
meta-data,1
imagesProcessed,1
encapsulates,1
.map(filterFuture,1
Runnable's,1
work,1
initiateStream(),1
calling,1
Recursively,1
defines,1
0;,1
String,1
color,1
package,1
transformation,1
.entrySet(),1
completablefutures,1
threads),1
prefix,1
setting/getting,1
Array,1
Tell,1
called,1
never,1
shutdown,1
java.util.stream.IntStream;,1
writes,1
identical,1
operation,1
dimensions,1
Maps,1
.map(rethrowFunction(name,1
\constructor,\,1
(int,1
allDoneFuture,1
arrays,1
Debug,1
.thenApply(v,1
byte[],1
\URLs,\,1
decode,1
\filter,\,1
web,1
starting,1
\byte[]{77,\,1
Uses,1
\"\canonical\,1
Controls,1
ByteArrayOutputStream,1
<U>,1
sum,1
.map(this::filterImageAsync),1
java.util.stream.Collectors;,1
Modifies,1
scales,1
actually,1
pointing,1
parameters,1
\"\Decorator"\\,1
try-with-resources,1
listOfMaps.get(treeIndex);,1
bookkeeping,1
filterFuture.thenCompose(filter,1
reqHeight),1
Just,1
normal,1
\114,\,1
Integer,1
(treeIndex,1
BitmapFactory.Options();,1
True,1
Loop,1
\name"\\,1
\directory),\,1
JVM,1
affecting,1
within,1
filtered/stored,1
image))),1
5x5,1
rethrowSupplier((),1
scaled,1
public,1
initialized,1
Stream.generate((Supplier<ResultMap>),1
calls),1
aggregate,1
Maximum,1
No,1
characters,1
not,1
\CompletableFuture.supplyAsync(filterDecoratorWithImage::run,\,1
exclude,1
\stream,\,1
unrecognized,1
ImageStream,1
variant,1
we've,1
forwards,1
\Pattern.compile("\,"\)\,1
before,1
Ensure,1
Call,1
http://stackoverflow.com/questions/37512662/is-there-anything-wrong,1
true;,1
inJustDecodeBounds=true,1
clean,1
filteredImages,1
two-dimensional,1
initial,1
previous,1
processStream(),1
converts,1
image-,1
\"\drawable-hdpi"\\,1
options,1
open,1
Executor),1
.collect(summingInt(List::size);,1
.asList(mDefaultUrls),1
finish,1
Forward,1
logic,1
finished,1
developer.android.com/training/displaying-bitmaps/load-bitmap.html,1
Function,1
\imageData,\,1
transparent,1
usage,1
First,1
large,1
Stores,1
\applyFilter(),\,1
graceful,1
could,1
subclass's,1
associates,1
(as,1
Adapted,1
For,1
particular,1
\97,\,1
Stream<String>,1
\input,\,1
Strings,1
.map(rethrowFunction(Class::forName)),1
Wait,1
\inputStream,\,1
derived,1
host,1
Necessary,1
where,1
++i),1
Enum,1
servers,1
applyFiltersAsync(),1
.forEach,1
Allows,1
Take,1
those,1
ImageStreamGang.downloadImage(url))),1
.map(CompletableFuture::join),1
\makeFilterDecorators(),\,1
cycles,1
inputUrl,1
general,1
BufferedImage,1
resultsMap.entrySet(),1
.map(urlFactory::apply),1
addition,1
String(new,1
combo,1
Any,1
commas,1
Initiate,1
underscore,1
Grayscale,1
organize,1
Indicate,1
expanded,1
\slowest"\);\,1
(2),1
To,1
provides,1
decodeSampledBitmapFromByteArray(byte[],1
Parse,1
awaitTermination(),1
While,1
Download,1
concurrent,1
strongOfUrls,1
coloring,1
.map(this::makeFilterDecorators),1
static,1
representing,1
succeeded,1
entry.getKey(),1
dot,1
\"\file:///android_res/drawable/bar.png"\\,1
factors,1
delimited,1
Collection.filter(),1
collector,1
uniqueInstance,1
pathname,1
defined,1
Provides,1
yield,1
decoratedFiltersWithImageFuture.thenCompose(list,1
InputStream,1
.forEach(entry,1
here,1
Normal,1
reqHeight);,1
\processing,\,1
\array,\,1
these,1
basic,1
StreamsUtils.joinAll(listOfFutures);,1
decoding,1
specify,1
writing,1
Android,1
garbage,1
Result,1
package's,1
supposed,1
listT,1
purpose,1
user-defined,1
\uncheck(Class::forName,\,1
\"\xxx"\);\,1
Clears,1
\processors,\,1
unread,1
perturbing,1
requires,1
allocating,1
Supplier<ResultMap>,1
bar.png,1
easy,1
entry.getKey());,1
testing,1
\downloaded,\,1
various,1
Pathname,1
-with-using-i-o-managedblocker-in-java8-parallelstream,1
(1),1
sup.get();,1
\"\filename"\\,1
about,1
there's,1
parallel,1
false;,1
List<T>,1
Runtime.getRuntime().availableProcessors(),1
Command,1
functionality,1
barrier,1
option,1
changed,1
useful,1
}));,1
smaller,1
Class.forName(name))),1
CompletableFuture.allOf(),1
implements,1
Initializes,1
options.inSampleSize,1
recursively,1
Executes,1
rest,1
E,1
.collect(Collectors.toList());,1
.toArray(String[]::new);,1
Singleton,1
\System.out.println("\\nPrinting\,1
.get(treeIndex),1
\"\decorates"\\,1
execute,1
arguments,1
allDoneList,1
programming,1
active,1
ArrayList<T>();,1
server,1
istream,1
InputSource,1
useless,1
read,1
.flatMap(this::applyFiltersAsync),1
.map(Enum::name),1
\completed,\,1
See,1
consumer;,1
subsequent,1
waits,1
\"\drawable"\\,1
inputs,1
sublcass,1
\System.out.println("\"\\,1
Supplier's,1
level,1
properties,1
\"\Component"\\,1
applying,1
no-op,1
succeed,1
