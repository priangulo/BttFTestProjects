// Automatically generated Bali code.  Edit at your own risk!
// Generated by "balicomposer" v2003.02.17.

//-----------------------------------//
// Option block:
//-----------------------------------//

// No options blocks in Bali grammar.

//-----------------------------------//
// Parser code block:
//-----------------------------------//

code {} code

//-----------------------------------//
// Token manager declarations:
//-----------------------------------//

// No TOKEN_MGR_DECLS defined in Bali grammar.

//-----------------------------------//
// Bali tokens:
//-----------------------------------//



//-----------------------------------//
// Regular expression tokens:
//-----------------------------------//

TOKEN: { 
   < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}


//-----------------------------------//
// Java code blocks:
//-----------------------------------//

// No JAVACODE blocks in Bali grammar.

//-----------------------------------//
// Bali productions:
//-----------------------------------//

Model
	: Prods [Cons] [Vars] :: MainModel
	;

AExpr
	: NExpr
	| NExpr "and" AExpr :: BAnd
	;

Avar
	: IDENTIFIER "{" [Opts] "}" :: Var
	;

AvarList
	: (Avar)+
	;

BExpr
	: IDENTIFIER   :: Bvar
	| "(" Expr ")" :: Paren
	;

Cons
	:  "%%" ESList :: ConsStmt
	;

EExpr
	: IExpr
	| IExpr "iff" EExpr :: BIff
	;

ESList
	: (ExprStmt)+
	;

Expr
	: "choose1" "(" ExprList ")" ::BChoose1
	| EExpr
	;

ExprList
	: EExpr ("," EExpr)*
	;

ExprStmt
	: Expr ";" :: EStmt
	| "let" IDENTIFIER "iff" Expr ";" :: VarDef
	;

GProd
	: IDENTIFIER ":" Pats ";" :: GProduction
	;

GTerm
	: LOOKAHEAD(2) IDENTIFIER "+"	:: PlusTerm
	| LOOKAHEAD(2) IDENTIFIER "*"   :: StarTerm
	| IDENTIFIER     	        :: TermName
	| "[" IDENTIFIER "]"            :: OptTerm
	;

IExpr
	: OExpr
	| OExpr "implies" IExpr :: BImplies
	;

NExpr
	: BExpr
	| "not" NExpr	:: BNot
	;

OExpr
	: AExpr
	| AExpr "or" OExpr :: BOr
	;

Opt
	: LOOKAHEAD(2) IDENTIFIER "=" STRING_LITERAL ::Strlit
	| IDENTIFIER :: Optid
	;

Opts
	: (Opt)+
	;

Pat
	: LOOKAHEAD(2) TermList "::" IDENTIFIER :: GPattern
	| IDENTIFIER  :: SimplePattern
	;

Pats
	: Pat ( "|" Pat)*
	;

Prods
	: (GProd)+
	;

TermList
	: (GTerm)+
	;

Vars
	: "##" AvarList :: VarStmt
	;
