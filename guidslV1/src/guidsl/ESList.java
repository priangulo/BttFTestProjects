// Automatically generated code.  Edit at your own risk!
// Generated by bali2jak v2002.09.03.

package guidsl;

import java.util.*;

public class ESList extends AstList {

    public void visit( Visitor v ) {
        
        v.action( this );
    }

   public static ArrayList CTable = new ArrayList(); 
	// CTable contains all additional constraints

   public static void dumpCTable() {
        System.out.println( "-------Begin Ctable Dump----------" );
		  int cnt = CTable.size();
		  for (int i = 0; i<cnt; i++) {
            node n = ( node ) CTable.get(i);
            System.out.println(n);
        }
        System.out.println( cnt + " additional constraints in all." );
        System.out.println( "-------End Ctable Dump----------" );
    }

   // harvest all additional constraints ....

   node eharvest() {

      AstCursor c = new AstCursor();
      for (c.FirstElement(this); c.MoreElement(); c.NextElement() ) {
        ExprStmt es = (ExprStmt) c.node ;
		  es.eharvest();
		}
	   return null;
   }
    static void makeClauses() {
        if (Main.outputModelPredicate) {
           System.out.println();
           System.out.println("// ESList");
        }

        Iterator i = CTable.iterator();
        while ( i.hasNext() ) {
            node n = ( node ) i.next();
            node simple = n.klone().simplify();
            if (Main.outputModelPredicate)
               System.out.println( simple  +  " and");   /*dsb*/
            node cnf = simple.klone().cnf();

            ArrayList al = new ArrayList();
            cnf.reduce( al );
            cnfClause.setFormula( al, n );
            cnfClause.clist.addAll( al );
        }
    }

    // method walks through the CTable. Each formula
    // is converted into a cnf formula, and then it is
    // converted into CNF format

    public static void toCnfFormat( cnfout out ) throws CNFException {
        int cnt = CTable.size();
        for ( int i = 0; i<cnt; i++ ) {
            node n = ( node ) CTable.get( i );
            out.beginFormula( n );
				node simple = n.klone().simplify();
				out.comment(simple);
				node cnf = simple.klone().cnf();
				out.cnfcomment(cnf);
            cnf.toCnfFormat( out );
            out.endFormula();
        }
    }
     // Get the constraints encoded as XML
     // This will need to be modified add full XML support.
     public static String getCTableXML() {
          StringBuffer str=new StringBuffer();

          str.append("<constraints>\n");
          int cnt = CTable.size();
          for (int i = 0; i<cnt; i++) {
            node n = ( node ) CTable.get(i);
            str.append("<constraint>"+n.toXMLString()+"</constraint>\n");
          }

          str.append("</constraints>\n");

         return str.toString();
    }

}
