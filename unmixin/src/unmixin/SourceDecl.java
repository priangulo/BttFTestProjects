// Automatically generated code.  Edit at your own risk!
// Generated by bali2jak v2002.09.03.

package unmixin;

import java.util.*;
import Jakarta.util.*;
import java.io.*;

public class SourceDecl extends TypeDeclaration {

    final public static int ARG_LENGTH = 1 ;
    final public static int TOK_LENGTH = 4 ;

    public AST_QualifiedName getAST_QualifiedName () {
        
        return (AST_QualifiedName) arg [0] ;
    }

    public AstToken getROOT () {
        
        return (AstToken) ((AstNode) tok [1]) . tok [0] ;
    }

    public AstToken getSOURCE () {
        
        return (AstToken) tok [0] ;
    }

    public AstToken getSTRING_LITERAL () {
        
        return (AstToken) tok [2] ;
    }

    public boolean[] printorder () {
        
        return new boolean[] {true, true, false, true, true} ;
    }

    public SourceDecl setParms
    (AstToken tok0, AstOptToken tok1, AST_QualifiedName arg0, AstToken tok2, AstToken tok3)
    {
        
        arg = new AstNode [ARG_LENGTH] ;
        tok = new AstTokenInterface [TOK_LENGTH] ;
        
        tok [0] = tok0 ;            /* SOURCE */
        tok [1] = tok1 ;            /* [ROOT] */
        arg [0] = arg0 ;            /* AST_QualifiedName */
        tok [2] = tok2 ;            /* STRING_LITERAL */
        tok [3] = tok3 ;            /* ";" */
        
        InitChildren () ;
        return (SourceDecl) this ;
    }
    public void propagateChanges() {
        // Step 1: harvest information from parse tree

        kernelConstants.globals().unmixin.base = ( tok[1].tokenName().equals( "RooT" ) );
        kernelConstants.globals().unmixin.layerName = ( ( AST_QualifiedName ) arg[0] ).GetName();

        String tmp = tok[2].tokenName() ;
        kernelConstants.globals().unmixin.fileName =  Main.uri2file( tmp.substring( 1, tmp.length() - 1 ) ) ;

        // Step 2: now look to the sibling of this AstNode.
        //         label it as extractable, if possible.  if not
        //         possible, report an error
        //         yes, the test is ugly: list linkages are not
        //         in SourceDecl nodes, but in their parent elements.
        //         Here is where we tag the next TypeDeclaration after
        //         a SourceDecl.

        if ( ! ( up.right != null && up.right.arg[0] != null &&
                ( ( TypeDeclaration ) up.right.arg[0] ).canExtract() ) )
            AstNode.fatalError( tok[0],
                       "SoUrCe declaration not matched with code body" );
    }

}
