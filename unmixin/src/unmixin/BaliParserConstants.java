/* Generated By:JavaCC: Do not edit this line. BaliParserConstants.java */
package unmixin ;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface BaliParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 9;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 10;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 11;
  /** RegularExpression Id. */
  int LETTER = 13;
  /** RegularExpression Id. */
  int DIGIT = 14;
  /** RegularExpression Id. */
  int ARROW = 15;
  /** RegularExpression Id. */
  int CONDITION = 16;
  /** RegularExpression Id. */
  int DELIVERY = 17;
  /** RegularExpression Id. */
  int EDGE = 18;
  /** RegularExpression Id. */
  int EDGEACTION = 19;
  /** RegularExpression Id. */
  int EDGETEST = 20;
  /** RegularExpression Id. */
  int ENTER = 21;
  /** RegularExpression Id. */
  int EXIT = 22;
  /** RegularExpression Id. */
  int GOTO_STATE = 23;
  /** RegularExpression Id. */
  int LPAREN = 24;
  /** RegularExpression Id. */
  int NESTED_STATE = 25;
  /** RegularExpression Id. */
  int OTHERWISE = 26;
  /** RegularExpression Id. */
  int OTHERWISE_DEFAULT = 27;
  /** RegularExpression Id. */
  int PREPARE = 28;
  /** RegularExpression Id. */
  int PROCEED = 29;
  /** RegularExpression Id. */
  int RPAREN = 30;
  /** RegularExpression Id. */
  int STATES = 31;
  /** RegularExpression Id. */
  int STATE_MACHINE = 32;
  /** RegularExpression Id. */
  int UNRECOGNIZABLE_STATE = 33;
  /** RegularExpression Id. */
  int ABSTRACT = 34;
  /** RegularExpression Id. */
  int BOOLEAN = 35;
  /** RegularExpression Id. */
  int BREAK = 36;
  /** RegularExpression Id. */
  int BYTE = 37;
  /** RegularExpression Id. */
  int CASE = 38;
  /** RegularExpression Id. */
  int CATCH = 39;
  /** RegularExpression Id. */
  int CHAR = 40;
  /** RegularExpression Id. */
  int CLASS = 41;
  /** RegularExpression Id. */
  int CONST = 42;
  /** RegularExpression Id. */
  int CONTINUE = 43;
  /** RegularExpression Id. */
  int _DEFAULT = 44;
  /** RegularExpression Id. */
  int DO = 45;
  /** RegularExpression Id. */
  int DOUBLE = 46;
  /** RegularExpression Id. */
  int ELSE = 47;
  /** RegularExpression Id. */
  int EXTENDS = 48;
  /** RegularExpression Id. */
  int FALSE = 49;
  /** RegularExpression Id. */
  int FINAL = 50;
  /** RegularExpression Id. */
  int FINALLY = 51;
  /** RegularExpression Id. */
  int FLOAT = 52;
  /** RegularExpression Id. */
  int FOR = 53;
  /** RegularExpression Id. */
  int GOTO = 54;
  /** RegularExpression Id. */
  int IF = 55;
  /** RegularExpression Id. */
  int IMPLEMENTS = 56;
  /** RegularExpression Id. */
  int IMPORT = 57;
  /** RegularExpression Id. */
  int INSTANCEOF = 58;
  /** RegularExpression Id. */
  int INT = 59;
  /** RegularExpression Id. */
  int INTERFACE = 60;
  /** RegularExpression Id. */
  int LONG = 61;
  /** RegularExpression Id. */
  int NATIVE = 62;
  /** RegularExpression Id. */
  int NEW = 63;
  /** RegularExpression Id. */
  int NULL = 64;
  /** RegularExpression Id. */
  int PACKAGE = 65;
  /** RegularExpression Id. */
  int PRIVATE = 66;
  /** RegularExpression Id. */
  int PROTECTED = 67;
  /** RegularExpression Id. */
  int PUBLIC = 68;
  /** RegularExpression Id. */
  int RETURN = 69;
  /** RegularExpression Id. */
  int SHORT = 70;
  /** RegularExpression Id. */
  int STATIC = 71;
  /** RegularExpression Id. */
  int SUPER = 72;
  /** RegularExpression Id. */
  int SWITCH = 73;
  /** RegularExpression Id. */
  int SYNCHRONIZED = 74;
  /** RegularExpression Id. */
  int THIS = 75;
  /** RegularExpression Id. */
  int THROW = 76;
  /** RegularExpression Id. */
  int THROWS = 77;
  /** RegularExpression Id. */
  int TRANSIENT = 78;
  /** RegularExpression Id. */
  int TRUE = 79;
  /** RegularExpression Id. */
  int TRY = 80;
  /** RegularExpression Id. */
  int VOID = 81;
  /** RegularExpression Id. */
  int VOLATILE = 82;
  /** RegularExpression Id. */
  int WHILE = 83;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 84;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 85;
  /** RegularExpression Id. */
  int HEX_LITERAL = 86;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 87;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 88;
  /** RegularExpression Id. */
  int EXPONENT = 89;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 90;
  /** RegularExpression Id. */
  int STRING_LITERAL = 91;
  /** RegularExpression Id. */
  int LBRACE = 92;
  /** RegularExpression Id. */
  int RBRACE = 93;
  /** RegularExpression Id. */
  int LBRACKET = 94;
  /** RegularExpression Id. */
  int RBRACKET = 95;
  /** RegularExpression Id. */
  int SEMICOLON = 96;
  /** RegularExpression Id. */
  int COMMA = 97;
  /** RegularExpression Id. */
  int DOT = 98;
  /** RegularExpression Id. */
  int ASSIGN = 99;
  /** RegularExpression Id. */
  int GT = 100;
  /** RegularExpression Id. */
  int LT = 101;
  /** RegularExpression Id. */
  int BANG = 102;
  /** RegularExpression Id. */
  int TILDE = 103;
  /** RegularExpression Id. */
  int HOOK = 104;
  /** RegularExpression Id. */
  int COLON = 105;
  /** RegularExpression Id. */
  int EQ = 106;
  /** RegularExpression Id. */
  int LE = 107;
  /** RegularExpression Id. */
  int GE = 108;
  /** RegularExpression Id. */
  int NE = 109;
  /** RegularExpression Id. */
  int SC_OR = 110;
  /** RegularExpression Id. */
  int SC_AND = 111;
  /** RegularExpression Id. */
  int INCR = 112;
  /** RegularExpression Id. */
  int DECR = 113;
  /** RegularExpression Id. */
  int PLUS = 114;
  /** RegularExpression Id. */
  int MINUS = 115;
  /** RegularExpression Id. */
  int STAR = 116;
  /** RegularExpression Id. */
  int SLASH = 117;
  /** RegularExpression Id. */
  int BIT_AND = 118;
  /** RegularExpression Id. */
  int BIT_OR = 119;
  /** RegularExpression Id. */
  int XOR = 120;
  /** RegularExpression Id. */
  int REM = 121;
  /** RegularExpression Id. */
  int LSHIFT = 122;
  /** RegularExpression Id. */
  int RSIGNEDSHIFT = 123;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFT = 124;
  /** RegularExpression Id. */
  int PLUSASSIGN = 125;
  /** RegularExpression Id. */
  int MINUSASSIGN = 126;
  /** RegularExpression Id. */
  int STARASSIGN = 127;
  /** RegularExpression Id. */
  int SLASHASSIGN = 128;
  /** RegularExpression Id. */
  int ANDASSIGN = 129;
  /** RegularExpression Id. */
  int ORASSIGN = 130;
  /** RegularExpression Id. */
  int XORASSIGN = 131;
  /** RegularExpression Id. */
  int REMASSIGN = 132;
  /** RegularExpression Id. */
  int LSHIFTASSIGN = 133;
  /** RegularExpression Id. */
  int RSIGNEDSHIFTASSIGN = 134;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFTASSIGN = 135;
  /** RegularExpression Id. */
  int AI_BEGIN = 136;
  /** RegularExpression Id. */
  int AI_END = 137;
  /** RegularExpression Id. */
  int AI_ESCAPE = 138;
  /** RegularExpression Id. */
  int CASE_BEGIN = 139;
  /** RegularExpression Id. */
  int CASE_END = 140;
  /** RegularExpression Id. */
  int CASE_ESCAPE = 141;
  /** RegularExpression Id. */
  int CAT_BEGIN = 142;
  /** RegularExpression Id. */
  int CAT_END = 143;
  /** RegularExpression Id. */
  int CAT_ESCAPE = 144;
  /** RegularExpression Id. */
  int CLS_BEGIN = 145;
  /** RegularExpression Id. */
  int CLS_END = 146;
  /** RegularExpression Id. */
  int CLS_ESCAPE = 147;
  /** RegularExpression Id. */
  int ESTM_BEGIN = 148;
  /** RegularExpression Id. */
  int ESTM_END = 149;
  /** RegularExpression Id. */
  int ESTM_ESCAPE = 150;
  /** RegularExpression Id. */
  int EXP_BEGIN = 151;
  /** RegularExpression Id. */
  int EXP_END = 152;
  /** RegularExpression Id. */
  int EXP_ESCAPE = 153;
  /** RegularExpression Id. */
  int ID_BEGIN = 154;
  /** RegularExpression Id. */
  int ID_END = 155;
  /** RegularExpression Id. */
  int ID_ESCAPE = 156;
  /** RegularExpression Id. */
  int NAMEID_ESCAPE = 157;
  /** RegularExpression Id. */
  int IMP_BEGIN = 158;
  /** RegularExpression Id. */
  int IMP_END = 159;
  /** RegularExpression Id. */
  int IMP_ESCAPE = 160;
  /** RegularExpression Id. */
  int MOD_BEGIN = 161;
  /** RegularExpression Id. */
  int MOD_END = 162;
  /** RegularExpression Id. */
  int MOD_ESCAPE = 163;
  /** RegularExpression Id. */
  int MTH_BEGIN = 164;
  /** RegularExpression Id. */
  int MTH_END = 165;
  /** RegularExpression Id. */
  int MTH_ESCAPE = 166;
  /** RegularExpression Id. */
  int PLST_BEGIN = 167;
  /** RegularExpression Id. */
  int PLST_END = 168;
  /** RegularExpression Id. */
  int PLST_ESCAPE = 169;
  /** RegularExpression Id. */
  int PRG_BEGIN = 170;
  /** RegularExpression Id. */
  int PRG_END = 171;
  /** RegularExpression Id. */
  int STM_BEGIN = 172;
  /** RegularExpression Id. */
  int STM_END = 173;
  /** RegularExpression Id. */
  int STM_ESCAPE = 174;
  /** RegularExpression Id. */
  int STR_ESCAPE = 175;
  /** RegularExpression Id. */
  int TLST_BEGIN = 176;
  /** RegularExpression Id. */
  int TLST_END = 177;
  /** RegularExpression Id. */
  int TLST_ESCAPE = 178;
  /** RegularExpression Id. */
  int TYP_BEGIN = 179;
  /** RegularExpression Id. */
  int TYP_END = 180;
  /** RegularExpression Id. */
  int TYP_ESCAPE = 181;
  /** RegularExpression Id. */
  int VI_BEGIN = 182;
  /** RegularExpression Id. */
  int VI_END = 183;
  /** RegularExpression Id. */
  int VI_ESCAPE = 184;
  /** RegularExpression Id. */
  int VLST_BEGIN = 185;
  /** RegularExpression Id. */
  int VLST_END = 186;
  /** RegularExpression Id. */
  int VLST_ESCAPE = 187;
  /** RegularExpression Id. */
  int XLST_BEGIN = 188;
  /** RegularExpression Id. */
  int XLST_END = 189;
  /** RegularExpression Id. */
  int XLST_ESCAPE = 190;
  /** RegularExpression Id. */
  int ALIAS = 191;
  /** RegularExpression Id. */
  int AUGMENT = 192;
  /** RegularExpression Id. */
  int ENVIRONMENT = 193;
  /** RegularExpression Id. */
  int PARENT = 194;
  /** RegularExpression Id. */
  int OVERRIDES = 195;
  /** RegularExpression Id. */
  int REFINES = 196;
  /** RegularExpression Id. */
  int SOURCE = 197;
  /** RegularExpression Id. */
  int ROOT = 198;
  /** RegularExpression Id. */
  int LAYER = 199;
  /** RegularExpression Id. */
  int IDENTIFIER = 203;
  /** RegularExpression Id. */
  int OTHER = 204;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_SINGLE_LINE_COMMENT = 1;
  /** Lexical state. */
  int IN_FORMAL_COMMENT = 2;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 3;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\f\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\t\"",
    "\"//\"",
    "<token of kind 7>",
    "\"/*\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "\"*/\"",
    "<token of kind 12>",
    "<LETTER>",
    "<DIGIT>",
    "\"->\"",
    "\"condition\"",
    "\"Delivery_parameters\"",
    "\"Transition\"",
    "\"Transition_action\"",
    "\"Transition_condition\"",
    "\"Enter\"",
    "\"Exit\"",
    "\"Goto_state\"",
    "\"(\"",
    "\"Nested_state\"",
    "\"Otherwise\"",
    "\"Otherwise_default\"",
    "\"Prepare\"",
    "\"Proceed\"",
    "\")\"",
    "\"States\"",
    "\"State_machine\"",
    "\"Unrecognizable_state\"",
    "\"abstract\"",
    "\"boolean\"",
    "\"break\"",
    "\"byte\"",
    "\"case\"",
    "\"catch\"",
    "\"char\"",
    "\"class\"",
    "\"const\"",
    "\"continue\"",
    "\"default\"",
    "\"do\"",
    "\"double\"",
    "\"else\"",
    "\"extends\"",
    "\"false\"",
    "\"final\"",
    "\"finally\"",
    "\"float\"",
    "\"for\"",
    "\"goto\"",
    "\"if\"",
    "\"implements\"",
    "\"import\"",
    "\"instanceof\"",
    "\"int\"",
    "\"interface\"",
    "\"long\"",
    "\"native\"",
    "\"new\"",
    "\"null\"",
    "\"package\"",
    "\"private\"",
    "\"protected\"",
    "\"public\"",
    "\"return\"",
    "\"short\"",
    "\"static\"",
    "\"super\"",
    "\"switch\"",
    "\"synchronized\"",
    "\"this\"",
    "\"throw\"",
    "\"throws\"",
    "\"transient\"",
    "\"true\"",
    "\"try\"",
    "\"void\"",
    "\"volatile\"",
    "\"while\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"=\"",
    "\">\"",
    "\"<\"",
    "\"!\"",
    "\"~\"",
    "\"?\"",
    "\":\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"%\"",
    "\"<<\"",
    "\">>\"",
    "\">>>\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"%=\"",
    "\"<<=\"",
    "\">>=\"",
    "\">>>=\"",
    "\"ai{\"",
    "\"}ai\"",
    "\"$ai\"",
    "\"case{\"",
    "\"}case\"",
    "\"$case\"",
    "\"cat{\"",
    "\"}cat\"",
    "\"$cat\"",
    "\"cls{\"",
    "\"}cls\"",
    "\"$cls\"",
    "\"estm{\"",
    "\"}estm\"",
    "\"$estm\"",
    "\"exp{\"",
    "\"}exp\"",
    "\"$exp\"",
    "\"id{\"",
    "\"}id\"",
    "\"$id\"",
    "\"$name\"",
    "\"imp{\"",
    "\"}imp\"",
    "\"$imp\"",
    "\"mod{\"",
    "\"}mod\"",
    "\"$mod\"",
    "\"mth{\"",
    "\"}mth\"",
    "\"$mth\"",
    "\"plst{\"",
    "\"}plst\"",
    "\"$plst\"",
    "\"prg{\"",
    "\"}prg\"",
    "\"stm{\"",
    "\"}stm\"",
    "\"$stm\"",
    "\"$str\"",
    "\"tlst{\"",
    "\"}tlst\"",
    "\"$tlst\"",
    "\"typ{\"",
    "\"}typ\"",
    "\"$typ\"",
    "\"vi{\"",
    "\"}vi\"",
    "\"$vi\"",
    "\"vlst{\"",
    "\"}vlst\"",
    "\"$vlst\"",
    "\"xlst{\"",
    "\"}xlst\"",
    "\"$xlst\"",
    "\"alias\"",
    "\"augment\"",
    "\"environment\"",
    "\"parent\"",
    "\"overrides\"",
    "\"refines\"",
    "\"SoUrCe\"",
    "\"RooT\"",
    "\"layer\"",
    "\"Super\"",
    "\"state_machine\"",
    "\"Local_Id\"",
    "<IDENTIFIER>",
    "<OTHER>",
  };

}
