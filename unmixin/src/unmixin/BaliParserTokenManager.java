/* BaliParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. BaliParserTokenManager.java */
package unmixin ;

/** Token Manager. */
@SuppressWarnings("unused")public class BaliParserTokenManager implements BaliParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x140L) != 0L || (active1 & 0x20000000000000L) != 0L || (active2 & 0x1L) != 0L)
            return 2;
         if ((active1 & 0x400000000L) != 0L)
            return 8;
         if ((active0 & 0xffffffffbeff0000L) != 0L || (active1 & 0xfffffL) != 0L || (active2 & 0xdb6dd6db76db6d00L) != 0L || (active3 & 0x7ffL) != 0L)
         {
            jjmatchedKind = 203;
            return 32;
         }
         return -1;
      case 1:
         if ((active0 & 0x100L) != 0L)
            return 0;
         if ((active0 & 0xff7f9fffbeff0000L) != 0L || (active1 & 0xfffffL) != 0L || (active2 & 0xdb6dd6db76db6d00L) != 0L || (active3 & 0x7ffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 203;
               jjmatchedPos = 1;
            }
            return 32;
         }
         if ((active0 & 0x80600000000000L) != 0L)
            return 32;
         return -1;
      case 2:
         if ((active0 & 0x675fdfffbeff0000L) != 0L || (active1 & 0xeffffL) != 0L || (active2 & 0xda2dd6db62db6800L) != 0L || (active3 & 0x7ffL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 203;
               jjmatchedPos = 2;
            }
            return 32;
         }
         if ((active0 & 0x9820000000000000L) != 0L || (active1 & 0x10000L) != 0L || (active2 & 0x100000010000400L) != 0L)
            return 32;
         return -1;
      case 3:
         if ((active0 & 0x571f5e9fbebf0000L) != 0L || (active1 & 0xc77feL) != 0L || (active2 & 0xda05028020502000L) != 0L || (active3 & 0x7bfL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 203;
               jjmatchedPos = 3;
            }
            return 32;
         }
         if ((active0 & 0x2040816000400000L) != 0L || (active1 & 0x28801L) != 0L || (active2 & 0x20c04902090800L) != 0L || (active3 & 0x40L) != 0L)
            return 32;
         return -1;
      case 4:
         if ((active0 & 0x5701580fbe9f0000L) != 0L || (active1 & 0x446beL) != 0L || (active3 & 0x63fL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 203;
               jjmatchedPos = 4;
            }
            return 32;
         }
         if ((active0 & 0x1e069000200000L) != 0L || (active1 & 0x83140L) != 0L || (active2 & 0xc804020020402000L) != 0L || (active3 & 0x180L) != 0L)
            return 32;
         return -1;
      case 5:
         if ((active0 & 0x1509180f3e9f0000L) != 0L || (active1 & 0x4440eL) != 0L || (active3 & 0x61bL) != 0L)
         {
            jjmatchedKind = 203;
            jjmatchedPos = 5;
            return 32;
         }
         if ((active0 & 0x4200400080000000L) != 0L || (active1 & 0x22b0L) != 0L || (active3 & 0x24L) != 0L)
            return 32;
         return -1;
      case 6:
         if ((active0 & 0x150008070e9f0000L) != 0L || (active1 & 0x44408L) != 0L || (active3 & 0x60aL) != 0L)
         {
            jjmatchedKind = 203;
            jjmatchedPos = 6;
            return 32;
         }
         if ((active0 & 0x9100830000000L) != 0L || (active1 & 0x6L) != 0L || (active3 & 0x11L) != 0L)
            return 32;
         return -1;
      case 7:
         if ((active0 & 0x150000030e9f0000L) != 0L || (active1 & 0x4408L) != 0L || (active3 & 0x20aL) != 0L)
         {
            jjmatchedKind = 203;
            jjmatchedPos = 7;
            return 32;
         }
         if ((active0 & 0x80400000000L) != 0L || (active1 & 0x40000L) != 0L || (active3 & 0x400L) != 0L)
            return 32;
         return -1;
      case 8:
         if ((active0 & 0x5000003029e0000L) != 0L || (active1 & 0x400L) != 0L || (active3 & 0x202L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 203;
               jjmatchedPos = 8;
            }
            return 32;
         }
         if ((active0 & 0x100000000c010000L) != 0L || (active1 & 0x4008L) != 0L || (active3 & 0x8L) != 0L)
            return 32;
         return -1;
      case 9:
         if ((active0 & 0x30a020000L) != 0L || (active1 & 0x400L) != 0L || (active3 & 0x202L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 203;
               jjmatchedPos = 9;
            }
            return 32;
         }
         if ((active0 & 0x5000000009c0000L) != 0L)
            return 32;
         return -1;
      case 10:
         if ((active0 & 0x30a1a0000L) != 0L || (active1 & 0x400L) != 0L || (active3 & 0x200L) != 0L)
         {
            jjmatchedKind = 203;
            jjmatchedPos = 10;
            return 32;
         }
         if ((active3 & 0x2L) != 0L)
            return 32;
         return -1;
      case 11:
         if ((active0 & 0x3081a0000L) != 0L || (active3 & 0x200L) != 0L)
         {
            jjmatchedKind = 203;
            jjmatchedPos = 11;
            return 32;
         }
         if ((active0 & 0x2000000L) != 0L || (active1 & 0x400L) != 0L)
            return 32;
         return -1;
      case 12:
         if ((active0 & 0x2081a0000L) != 0L)
         {
            jjmatchedKind = 203;
            jjmatchedPos = 12;
            return 32;
         }
         if ((active0 & 0x100000000L) != 0L || (active3 & 0x200L) != 0L)
            return 32;
         return -1;
      case 13:
         if ((active0 & 0x2081a0000L) != 0L)
         {
            jjmatchedKind = 203;
            jjmatchedPos = 13;
            return 32;
         }
         return -1;
      case 14:
         if ((active0 & 0x2081a0000L) != 0L)
         {
            jjmatchedKind = 203;
            jjmatchedPos = 14;
            return 32;
         }
         return -1;
      case 15:
         if ((active0 & 0x2081a0000L) != 0L)
         {
            jjmatchedKind = 203;
            jjmatchedPos = 15;
            return 32;
         }
         return -1;
      case 16:
         if ((active0 & 0x8080000L) != 0L)
            return 32;
         if ((active0 & 0x200120000L) != 0L)
         {
            jjmatchedKind = 203;
            jjmatchedPos = 16;
            return 32;
         }
         return -1;
      case 17:
         if ((active0 & 0x200120000L) != 0L)
         {
            jjmatchedKind = 203;
            jjmatchedPos = 17;
            return 32;
         }
         return -1;
      case 18:
         if ((active0 & 0x200100000L) != 0L)
         {
            jjmatchedKind = 203;
            jjmatchedPos = 18;
            return 32;
         }
         if ((active0 & 0x20000L) != 0L)
            return 32;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 5);
      case 10:
         return jjStopAtPos(0, 3);
      case 12:
         return jjStopAtPos(0, 2);
      case 13:
         return jjStopAtPos(0, 4);
      case 32:
         return jjStopAtPos(0, 1);
      case 33:
         jjmatchedKind = 102;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000000L, 0x0L, 0x0L);
      case 36:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4924c24932492400L, 0x0L);
      case 37:
         jjmatchedKind = 121;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x10L, 0x0L);
      case 38:
         jjmatchedKind = 118;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000000L, 0x2L, 0x0L);
      case 40:
         return jjStopAtPos(0, 24);
      case 41:
         return jjStopAtPos(0, 30);
      case 42:
         jjmatchedKind = 116;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000000000L, 0x0L, 0x0L);
      case 43:
         jjmatchedKind = 114;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2001000000000000L, 0x0L, 0x0L);
      case 44:
         return jjStopAtPos(0, 97);
      case 45:
         jjmatchedKind = 115;
         return jjMoveStringLiteralDfa1_0(0x8000L, 0x4002000000000000L, 0x0L, 0x0L);
      case 46:
         return jjStartNfaWithStates_0(0, 98, 8);
      case 47:
         jjmatchedKind = 117;
         return jjMoveStringLiteralDfa1_0(0x140L, 0x0L, 0x1L, 0x0L);
      case 58:
         return jjStopAtPos(0, 105);
      case 59:
         return jjStopAtPos(0, 96);
      case 60:
         jjmatchedKind = 101;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400080000000000L, 0x20L, 0x0L);
      case 61:
         jjmatchedKind = 99;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000000L, 0x0L, 0x0L);
      case 62:
         jjmatchedKind = 100;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1800100000000000L, 0xc0L, 0x0L);
      case 63:
         return jjStopAtPos(0, 104);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x20000L, 0x0L, 0x0L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x600000L, 0x0L, 0x0L, 0x0L);
      case 71:
         return jjMoveStringLiteralDfa1_0(0x800000L, 0x0L, 0x0L, 0x0L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x400L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x0L, 0x0L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0xc000000L, 0x0L, 0x0L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x30000000L, 0x0L, 0x0L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x40L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x180000000L, 0x0L, 0x0L, 0x120L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x1c0000L, 0x0L, 0x0L, 0x0L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x200000000L, 0x0L, 0x0L, 0x0L);
      case 91:
         return jjStopAtPos(0, 94);
      case 93:
         return jjStopAtPos(0, 95);
      case 94:
         jjmatchedKind = 120;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L, 0x8000000000000100L, 0x1L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x3800000000L, 0x0L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0xfc000010000L, 0x0L, 0x24800L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x700000000000L, 0x0L, 0x0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x1800000000000L, 0x0L, 0x900000L, 0x2L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x3e000000000000L, 0x0L, 0x0L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x0L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x1f80000000000000L, 0x0L, 0x44000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x0L, 0x0L, 0x80L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1200000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0xc000000000000000L, 0x1L, 0x0L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x8L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1eL, 0x48000000000L, 0x4L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20L, 0x0L, 0x10L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7c0L, 0x100000000000L, 0x200L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1f800L, 0x9000000000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x60000L, 0x240000000000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000L, 0x0L, 0x0L);
      case 120:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1000000000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 92);
      case 124:
         jjmatchedKind = 119;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000000L, 0x4L, 0x0L);
      case 125:
         jjmatchedKind = 93;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2492292489249200L, 0x0L);
      case 126:
         return jjStopAtPos(0, 103);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2, active3);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 111);
         break;
      case 42:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(1, 8, 0);
         break;
      case 43:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 112);
         break;
      case 45:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 113);
         break;
      case 47:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      case 60:
         if ((active1 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x20L, active3, 0L);
      case 61:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 106);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 107);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 108);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 109);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 125);
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 126);
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 127);
         else if ((active2 & 0x1L) != 0L)
            return jjStopAtPos(1, 128);
         else if ((active2 & 0x2L) != 0L)
            return jjStopAtPos(1, 129);
         else if ((active2 & 0x4L) != 0L)
            return jjStopAtPos(1, 130);
         else if ((active2 & 0x8L) != 0L)
            return jjStopAtPos(1, 131);
         else if ((active2 & 0x10L) != 0L)
            return jjStopAtPos(1, 132);
         break;
      case 62:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(1, 15);
         else if ((active1 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000000000000000L, active2, 0xc0L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x400200c000000000L, active1, 0x2L, active2, 0x4e00L, active3, 0x84L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0L, active2, 0L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0xdb000L, active3, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x4000000L, active3, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000100002020000L, active1, 0x20L, active2, 0x3600000L, active3, 0x10L);
      case 102:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 55, 32);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L, active1, 0x83840L, active2, 0L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0xc000000000000L, active1, 0L, active2, 0x40000198000100L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x10820000000000L, active1, 0L, active2, 0x9201008000020000L, active3, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x300000000000000L, active1, 0L, active2, 0x6c40000000L, active3, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x1c00000200200000L, active1, 0L, active2, 0x20000000L, active3, 0x2L);
      case 111:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x20604c0800810000L, active1, 0x60000L, active2, 0x200000000L, active3, 0x460L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0xb0000000000L, active3, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x10301c0000L, active1, 0x1c00cL, active2, 0x40000000000L, active3, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0xe00000100000L, active3, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x18c000000L, active1, 0x80L, active2, 0x36101000000000L, active3, 0x200L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x111L, active2, 0L, active3, 0x101L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0xd80000000000000L, active3, 0x8L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200L, active2, 0L, active3, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000400000L, active1, 0L, active2, 0x6000000000800000L, active3, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000L, active1, 0x400L, active2, 0x8000000000000L, active3, 0L);
      case 124:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 110);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2, active3);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active2 & 0x20L) != 0L)
            return jjStopAtPos(2, 133);
         else if ((active2 & 0x40L) != 0L)
            return jjStopAtPos(2, 134);
         break;
      case 62:
         if ((active1 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 124;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x80L, active3, 0L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x301801c0000L, active1, 0x4080L, active2, 0x2001b000L, active3, 0x200L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10L, active2, 0L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2L, active2, 0L, active3, 0x400L);
      case 100:
         if ((active2 & 0x8000000L) != 0L)
            return jjStopAtPos(2, 155);
         else if ((active2 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 156, 32);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x200000000L, active3, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x1010000000L, active1, 0L, active2, 0L, active3, 0x8L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L, active1, 0L, active2, 0L, active3, 0x10L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x40000000000L, active3, 0x1L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0xc000000L, active1, 0L, active2, 0x1000000000L, active3, 0L);
      case 105:
         if ((active2 & 0x200L) != 0L)
            return jjStopAtPos(2, 137);
         else if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 138, 32);
         else if ((active2 & 0x80000000000000L) != 0L)
            return jjStopAtPos(2, 183);
         else if ((active2 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 184, 32);
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L, active1, 0xa0a04L, active2, 0x8000000000000000L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000020000L, active1, 0x40001L, active2, 0x6c060300000c0000L, active3, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x100180000000L, active3, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x200c0c0000010000L, active1, 0x400L, active2, 0L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000820000000L, active1, 0x48L, active2, 0xc00000000L, active3, 0x40L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x300000000000000L, active1, 0x100L, active2, 0x8000040800000L, active3, 0x100L);
      case 114:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 53, 32);
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L, active1, 0x3000L, active2, 0x80000000000L, active3, 0x4L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x400804402000000L, active1, 0L, active2, 0x1201008000620800L, active3, 0L);
      case 116:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x504100a000a00000L, active1, 0x20L, active2, 0xe06000104000L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L, active1, 0x8000L, active2, 0L, active3, 0L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2L);
      case 119:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 63, 32);
         break;
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x3000000L, active3, 0L);
      case 121:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(2, 80, 32);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x30000000000000L, active3, 0x80L);
      case 123:
         if ((active2 & 0x100L) != 0L)
            return jjStopAtPos(2, 136);
         else if ((active2 & 0x4000000L) != 0L)
            return jjStopAtPos(2, 154);
         else if ((active2 & 0x40000000000000L) != 0L)
            return jjStopAtPos(2, 182);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2, active3);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active2 & 0x80L) != 0L)
            return jjStopAtPos(3, 135);
         break;
      case 84:
         if ((active3 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 198, 32);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x1c101000000000L, active1, 0x40000L, active2, 0x8000000000000000L, active3, 0x400L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x8020000000L, active1, 0x400L, active2, 0L, active3, 0L);
      case 100:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 81, 32);
         else if ((active2 & 0x400000000L) != 0L)
            return jjStopAtPos(3, 162);
         else if ((active2 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 163, 32);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L, active1, 0L, active2, 0L, active3, 0L);
      case 101:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 37, 32);
         else if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 47, 32);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 79, 32);
         return jjMoveStringLiteralDfa4_0(active0, 0x100100020c200000L, active1, 0x100L, active2, 0x800L, active3, 0x184L);
      case 103:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 61, 32);
         else if ((active2 & 0x80000000000L) != 0L)
            return jjStopAtPos(3, 171);
         break;
      case 104:
         if ((active2 & 0x2000000000L) != 0L)
            return jjStopAtPos(3, 165);
         else if ((active2 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 166, 32);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000020000L, active1, 0L, active2, 0L, active3, 0x12L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2L, active2, 0L, active3, 0L);
      case 108:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(3, 64, 32);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000800000000L, active1, 0x80010L, active2, 0L, active3, 0L);
      case 109:
         if ((active2 & 0x200000000000L) != 0L)
            return jjStopAtPos(3, 173);
         else if ((active2 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 174, 32);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x20100000L, active3, 0x1L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x1c0000L, active1, 0x4000L, active2, 0L, active3, 0L);
      case 111:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 54, 32);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000800000L, active1, 0x3000L, active2, 0L, active3, 0L);
      case 112:
         if ((active2 & 0x1000000L) != 0L)
            return jjStopAtPos(3, 152);
         else if ((active2 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 153, 32);
         else if ((active2 & 0x80000000L) != 0L)
            return jjStopAtPos(3, 159);
         else if ((active2 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 160, 32);
         else if ((active2 & 0x10000000000000L) != 0L)
            return jjStopAtPos(3, 180);
         else if ((active2 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 181, 32);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L, active1, 0L, active2, 0L, active3, 0L);
      case 114:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 40, 32);
         else if ((active2 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 175, 32);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40L, active2, 0L, active3, 0x28L);
      case 115:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 75, 32);
         else if ((active2 & 0x40000L) != 0L)
            return jjStopAtPos(3, 146);
         else if ((active2 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 147, 32);
         return jjMoveStringLiteralDfa4_0(active0, 0x2060000000000L, active1, 0L, active2, 0x6c06030000003000L, active3, 0L);
      case 116:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 32);
         else if ((active2 & 0x8000L) != 0L)
            return jjStopAtPos(3, 143);
         else if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 144, 32);
         return jjMoveStringLiteralDfa4_0(active0, 0x400080582000000L, active1, 0x288L, active2, 0x1201008000600000L, active3, 0x200L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20L, active2, 0L, active3, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4L, active2, 0L, active3, 0L);
      case 123:
         if ((active2 & 0x4000L) != 0L)
            return jjStopAtPos(3, 142);
         else if ((active2 & 0x20000L) != 0L)
            return jjStopAtPos(3, 145);
         else if ((active2 & 0x800000L) != 0L)
            return jjStopAtPos(3, 151);
         else if ((active2 & 0x40000000L) != 0L)
            return jjStopAtPos(3, 158);
         else if ((active2 & 0x200000000L) != 0L)
            return jjStopAtPos(3, 161);
         else if ((active2 & 0x1000000000L) != 0L)
            return jjStopAtPos(3, 164);
         else if ((active2 & 0x40000000000L) != 0L)
            return jjStopAtPos(3, 170);
         else if ((active2 & 0x100000000000L) != 0L)
            return jjStopAtPos(3, 172);
         else if ((active2 & 0x8000000000000L) != 0L)
            return jjStopAtPos(3, 179);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2, active3);
      return 4;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20L);
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L, active1, 0L, active2, 0L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000010000000L, active1, 0x6L, active2, 0L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L, active1, 0x200L, active2, 0L, active3, 0L);
      case 101:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 49, 32);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 83, 32);
         else if ((active2 & 0x1000L) != 0L)
            return jjStopAtPos(4, 140);
         else if ((active2 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 141, 32);
         else if ((active2 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 157, 32);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000009a2000000L, active1, 0x8L, active2, 0L, active3, 0x201L);
      case 104:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 39, 32);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400L, active2, 0L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000010000L, active1, 0x90L, active2, 0L, active3, 0L);
      case 107:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 36, 32);
         break;
      case 108:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x8400000000000L, active1, 0L, active2, 0L, active3, 0x400L);
      case 109:
         if ((active2 & 0x200000L) != 0L)
            return jjStopAtPos(4, 149);
         else if ((active2 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 150, 32);
         break;
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000L, active1, 0L, active2, 0L, active3, 0x14L);
      case 114:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 21, 32);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 72, 32);
         else if ((active3 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 199, 32);
         else if ((active3 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 200, 32);
         return jjMoveStringLiteralDfa5_0(active0, 0x120000040c000000L, active1, 0x20L, active2, 0L, active3, 0xaL);
      case 115:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 41, 32);
         else if ((active2 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 191, 32);
         return jjMoveStringLiteralDfa5_0(active0, 0x1c0000L, active1, 0x4000L, active2, 0L, active3, 0L);
      case 116:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 42, 32);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 52, 32);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 70, 32);
         else if ((active2 & 0x10000000000L) != 0L)
            return jjStopAtPos(4, 168);
         else if ((active2 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 169, 32);
         else if ((active2 & 0x2000000000000L) != 0L)
            return jjStopAtPos(4, 177);
         else if ((active2 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 178, 32);
         else if ((active2 & 0x400000000000000L) != 0L)
            return jjStopAtPos(4, 186);
         else if ((active2 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 187, 32);
         else if ((active2 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(4, 189);
         else if ((active2 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 190, 32);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000L, active2, 0L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000020000L, active1, 0L, active2, 0L, active3, 0L);
      case 119:
         if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000L, active2, 0L, active3, 0L);
      case 123:
         if ((active2 & 0x800L) != 0L)
            return jjStopAtPos(4, 139);
         else if ((active2 & 0x100000L) != 0L)
            return jjStopAtPos(4, 148);
         else if ((active2 & 0x8000000000L) != 0L)
            return jjStopAtPos(4, 167);
         else if ((active2 & 0x1000000000000L) != 0L)
            return jjStopAtPos(4, 176);
         else if ((active2 & 0x200000000000000L) != 0L)
            return jjStopAtPos(4, 185);
         else if ((active2 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(4, 188);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, 0L, active3);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000L, active1, 0L, active3, 0x600L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0xc00000000L, active1, 0L, active3, 0L);
      case 99:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 68, 32);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 71, 32);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8L, active3, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000002000000L, active1, 0L, active3, 0L);
      case 101:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 46, 32);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 62, 32);
         else if ((active3 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 197, 32);
         return jjMoveStringLiteralDfa6_0(active0, 0x20020000L, active1, 0L, active3, 0x10L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000000L, active1, 0L, active3, 0L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2L, active3, 0L);
      case 104:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 73, 32);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x1c0000L, active1, 0x44000L, active3, 0x8L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x8100000000000L, active1, 0L, active3, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000000L, active1, 0L, active3, 0L);
      case 110:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 69, 32);
         return jjMoveStringLiteralDfa6_0(active0, 0x400080000000000L, active1, 0L, active3, 0x1L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L, active1, 0L, active3, 0x2L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000L, active1, 0x400L, active3, 0L);
      case 115:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 31, 32);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 77, 32);
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L, active1, 0L, active3, 0L);
      case 116:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 57, 32);
         else if ((active3 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 194, 32);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L, active1, 0x4L, active3, 0L);
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0xc000000L, active1, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, 0L, active3);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old3, long active3){
   if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(4, old0, old1, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L, active3);
      return 6;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active3, 0x400L);
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000L, active1, 0L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000000L, active1, 0L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000400000000L, active1, 0L, active3, 0L);
      case 100:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 29, 32);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active3, 0x8L);
      case 101:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(6, 28, 32);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(6, 65, 32);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(6, 66, 32);
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000000L, active1, 0x4000L, active3, 0L);
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000L, active1, 0L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0xc010000L, active1, 0L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000L, active3, 0L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000L, active1, 0L, active3, 0x200L);
      case 110:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(6, 35, 32);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active3, 0x2L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400L, active3, 0L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000L, active1, 0L, active3, 0L);
      case 115:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 48, 32);
         else if ((active3 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(6, 196, 32);
         break;
      case 116:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 44, 32);
         else if ((active3 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(6, 192, 32);
         return jjMoveStringLiteralDfa7_0(active0, 0x9c0000L, active1, 0x8L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000L, active1, 0L, active3, 0L);
      case 121:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 51, 32);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L, active3);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old3, long active3){
   if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, 0L, active3);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x100800000L, active1, 0L, active3, 0x200L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000000L, active1, 0L, active3, 0L);
      case 100:
         if ((active3 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(7, 202, 32);
         break;
      case 101:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 43, 32);
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(7, 82, 32);
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000000L, active1, 0x8L, active3, 0x8L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x1c0000L, active1, 0L, active3, 0L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active3, 0x2L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000200000000L, active1, 0x4400L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000L, active1, 0L, active3, 0L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0xe000000L, active1, 0L, active3, 0L);
      case 116:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(7, 34, 32);
         break;
      case 121:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000L, active1, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, 0L, active3);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old3, long active3){
   if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(6, old0, old1, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, 0L, active3);
      return 8;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000L, active1, 0L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000L, active1, 0L, active3, 0x200L);
      case 100:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(8, 67, 32);
         break;
      case 101:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 8;
         }
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 60, 32);
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000L, active1, 0L, active3, 0x2L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000L, active1, 0x400L, active3, 0L);
      case 110:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(8, 16, 32);
         break;
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000001c0000L, active1, 0L, active3, 0L);
      case 115:
         if ((active3 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(8, 195, 32);
         break;
      case 116:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(8, 78, 32);
         return jjMoveStringLiteralDfa9_0(active0, 0x100000002800000L, active1, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, 0L, active3);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old3, long active3){
   if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(7, old0, old1, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, 0L, active3);
      return 9;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000L, active1, 0L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000L, active1, 0L, active3, 0L);
      case 101:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(9, 23, 32);
         break;
      case 102:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 58, 32);
         break;
      case 104:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000L, active1, 0L, active3, 0x200L);
      case 110:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x180000L, active1, 0L, active3, 0x2L);
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000L, active1, 0L, active3, 0L);
      case 115:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 56, 32);
         break;
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000L, active1, 0x400L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, 0L, active3);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old3, long active3){
   if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(8, old0, old1, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, 0L, active3);
      return 10;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa11_0(active0, 0x180000L, active1, 0L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x200020000L, active1, 0L, active3, 0L);
      case 100:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000L, active1, 0L, active3, 0L);
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x400L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000000L, active1, 0L, active3, 0x200L);
      case 116:
         if ((active3 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(10, 193, 32);
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000L, active1, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, 0L, active3);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old3, long active3){
   if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(9, old0, old1, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, 0L, active3);
      return 11;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x80000L, active1, 0L, active3, 0L);
      case 98:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000000L, active1, 0L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000L, active1, 0L, active3, 0L);
      case 100:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(11, 74, 32);
         break;
      case 101:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(11, 25, 32);
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000L, active1, 0L, active3, 0L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000000L, active1, 0L, active3, 0x200L);
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0x20000L, active1, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, 0L, active3);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old3, long active3){
   if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(10, old0, old1, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L, 0L, active3);
      return 12;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x20000L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa13_0(active0, 0x80000L, active3, 0L);
      case 101:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(12, 32, 32);
         else if ((active3 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(12, 201, 32);
         break;
      case 102:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000000L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa13_0(active0, 0x200000000L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x100000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old3, long active3){
   if (((active0 &= old0) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(11, old0, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L, 0L, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0x8000000L);
      case 101:
         return jjMoveStringLiteralDfa14_0(active0, 0x200000000L);
      case 109:
         return jjMoveStringLiteralDfa14_0(active0, 0x20000L);
      case 110:
         return jjMoveStringLiteralDfa14_0(active0, 0x100000L);
      case 116:
         return jjMoveStringLiteralDfa14_0(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L, 0L, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa15_0(active0, 0x200000000L);
      case 100:
         return jjMoveStringLiteralDfa15_0(active0, 0x100000L);
      case 101:
         return jjMoveStringLiteralDfa15_0(active0, 0x20000L);
      case 105:
         return jjMoveStringLiteralDfa15_0(active0, 0x80000L);
      case 117:
         return jjMoveStringLiteralDfa15_0(active0, 0x8000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L, 0L, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa16_0(active0, 0x100000L);
      case 108:
         return jjMoveStringLiteralDfa16_0(active0, 0x8000000L);
      case 111:
         return jjMoveStringLiteralDfa16_0(active0, 0x80000L);
      case 115:
         return jjMoveStringLiteralDfa16_0(active0, 0x200000000L);
      case 116:
         return jjMoveStringLiteralDfa16_0(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L, 0L, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa17_0(active0, 0x20000L);
      case 110:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(16, 19, 32);
         break;
      case 116:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(16, 27, 32);
         return jjMoveStringLiteralDfa17_0(active0, 0x200100000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L, 0L, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa18_0(active0, 0x200000000L);
      case 105:
         return jjMoveStringLiteralDfa18_0(active0, 0x100000L);
      case 114:
         return jjMoveStringLiteralDfa18_0(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, 0L, 0L, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa19_0(active0, 0x100000L);
      case 115:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(18, 17, 32);
         break;
      case 116:
         return jjMoveStringLiteralDfa19_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, 0L, 0L, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(19, 33, 32);
         break;
      case 110:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(19, 20, 32);
         break;
      default :
         break;
   }
   return jjStartNfa_0(18, active0, 0L, 0L, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 52;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(0, 6); }
                  else if (curChar == 36)
                  {
                     if (kind > 203)
                        kind = 203;
                     { jjCheckNAdd(32); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(7, 9); }
                  else if (curChar == 39)
                     { jjAddStates(10, 11); }
                  else if (curChar == 46)
                     { jjCheckNAdd(8); }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 2;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 84)
                        kind = 84;
                     { jjCheckNAddTwoStates(5, 6); }
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 84)
                        kind = 84;
                     { jjCheckNAddStates(12, 14); }
                  }
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 4:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  { jjCheckNAddTwoStates(5, 6); }
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  { jjCheckNAddTwoStates(5, 6); }
                  break;
               case 7:
                  if (curChar == 46)
                     { jjCheckNAdd(8); }
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  { jjCheckNAddStates(15, 17); }
                  break;
               case 10:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(11); }
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  { jjCheckNAddTwoStates(11, 12); }
                  break;
               case 13:
                  if (curChar == 39)
                     { jjAddStates(10, 11); }
                  break;
               case 14:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     { jjCheckNAdd(15); }
                  break;
               case 15:
                  if (curChar == 39 && kind > 90)
                     kind = 90;
                  break;
               case 17:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAdd(15); }
                  break;
               case 18:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(19, 15); }
                  break;
               case 19:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(15); }
                  break;
               case 20:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(19); }
                  break;
               case 22:
                  if (curChar == 34)
                     { jjCheckNAddStates(7, 9); }
                  break;
               case 23:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(7, 9); }
                  break;
               case 25:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(7, 9); }
                  break;
               case 26:
                  if (curChar == 34 && kind > 91)
                     kind = 91;
                  break;
               case 27:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(18, 21); }
                  break;
               case 28:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(7, 9); }
                  break;
               case 29:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(28); }
                  break;
               case 31:
                  if (curChar != 36)
                     break;
                  if (kind > 203)
                     kind = 203;
                  { jjCheckNAdd(32); }
                  break;
               case 32:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 203)
                     kind = 203;
                  { jjCheckNAdd(32); }
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(0, 6); }
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(34, 35); }
                  break;
               case 35:
                  if (curChar != 46)
                     break;
                  if (kind > 88)
                     kind = 88;
                  { jjCheckNAddStates(22, 24); }
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  { jjCheckNAddStates(22, 24); }
                  break;
               case 38:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(39); }
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  { jjCheckNAddTwoStates(39, 12); }
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(40, 41); }
                  break;
               case 42:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(43); }
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  { jjCheckNAddTwoStates(43, 12); }
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(25, 27); }
                  break;
               case 46:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(47); }
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(47, 12); }
                  break;
               case 48:
                  if (curChar != 48)
                     break;
                  if (kind > 84)
                     kind = 84;
                  { jjCheckNAddStates(12, 14); }
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  { jjCheckNAddTwoStates(50, 6); }
                  break;
               case 51:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  { jjCheckNAddTwoStates(51, 6); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 32:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 203)
                     kind = 203;
                  { jjCheckNAdd(32); }
                  break;
               case 1:
                  if (kind > 7)
                     kind = 7;
                  break;
               case 6:
                  if ((0x100000001000L & l) != 0L && kind > 84)
                     kind = 84;
                  break;
               case 9:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(28, 29); }
                  break;
               case 12:
                  if ((0x5000000050L & l) != 0L && kind > 88)
                     kind = 88;
                  break;
               case 14:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAdd(15); }
                  break;
               case 16:
                  if (curChar == 92)
                     { jjAddStates(30, 32); }
                  break;
               case 17:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAdd(15); }
                  break;
               case 23:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(7, 9); }
                  break;
               case 24:
                  if (curChar == 92)
                     { jjAddStates(33, 35); }
                  break;
               case 25:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAddStates(7, 9); }
                  break;
               case 37:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(36, 37); }
                  break;
               case 41:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(38, 39); }
                  break;
               case 45:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(40, 41); }
                  break;
               case 49:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(50); }
                  break;
               case 50:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  { jjCheckNAddTwoStates(50, 6); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 32:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 203)
                     kind = 203;
                  { jjCheckNAdd(32); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 7)
                     kind = 7;
                  break;
               case 14:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 23:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(7, 9); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 52 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_3(){
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_3(0x800L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_3(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(1, 11);
         break;
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 5;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 9)
                        kind = 9;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  else if (curChar == 10)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 13 && kind > 9)
                     kind = 9;
                  break;
               case 2:
                  if (curChar == 10)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (curChar == 10 && kind > 9)
                     kind = 9;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 5 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_2(){
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x400L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_2(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   34, 35, 40, 41, 44, 45, 12, 23, 24, 26, 14, 16, 49, 51, 6, 8, 
   9, 12, 23, 24, 28, 26, 36, 37, 12, 44, 45, 12, 10, 11, 17, 18, 
   20, 25, 27, 29, 38, 39, 42, 43, 46, 47, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec8[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, "\55\76", "\143\157\156\144\151\164\151\157\156", 
"\104\145\154\151\166\145\162\171\137\160\141\162\141\155\145\164\145\162\163", "\124\162\141\156\163\151\164\151\157\156", 
"\124\162\141\156\163\151\164\151\157\156\137\141\143\164\151\157\156", 
"\124\162\141\156\163\151\164\151\157\156\137\143\157\156\144\151\164\151\157\156", "\105\156\164\145\162", "\105\170\151\164", 
"\107\157\164\157\137\163\164\141\164\145", "\50", "\116\145\163\164\145\144\137\163\164\141\164\145", 
"\117\164\150\145\162\167\151\163\145", "\117\164\150\145\162\167\151\163\145\137\144\145\146\141\165\154\164", 
"\120\162\145\160\141\162\145", "\120\162\157\143\145\145\144", "\51", "\123\164\141\164\145\163", 
"\123\164\141\164\145\137\155\141\143\150\151\156\145", 
"\125\156\162\145\143\157\147\156\151\172\141\142\154\145\137\163\164\141\164\145", "\141\142\163\164\162\141\143\164", "\142\157\157\154\145\141\156", 
"\142\162\145\141\153", "\142\171\164\145", "\143\141\163\145", "\143\141\164\143\150", 
"\143\150\141\162", "\143\154\141\163\163", "\143\157\156\163\164", 
"\143\157\156\164\151\156\165\145", "\144\145\146\141\165\154\164", "\144\157", "\144\157\165\142\154\145", 
"\145\154\163\145", "\145\170\164\145\156\144\163", "\146\141\154\163\145", 
"\146\151\156\141\154", "\146\151\156\141\154\154\171", "\146\154\157\141\164", "\146\157\162", 
"\147\157\164\157", "\151\146", "\151\155\160\154\145\155\145\156\164\163", 
"\151\155\160\157\162\164", "\151\156\163\164\141\156\143\145\157\146", "\151\156\164", 
"\151\156\164\145\162\146\141\143\145", "\154\157\156\147", "\156\141\164\151\166\145", "\156\145\167", 
"\156\165\154\154", "\160\141\143\153\141\147\145", "\160\162\151\166\141\164\145", 
"\160\162\157\164\145\143\164\145\144", "\160\165\142\154\151\143", "\162\145\164\165\162\156", 
"\163\150\157\162\164", "\163\164\141\164\151\143", "\163\165\160\145\162", 
"\163\167\151\164\143\150", "\163\171\156\143\150\162\157\156\151\172\145\144", "\164\150\151\163", 
"\164\150\162\157\167", "\164\150\162\157\167\163", "\164\162\141\156\163\151\145\156\164", 
"\164\162\165\145", "\164\162\171", "\166\157\151\144", "\166\157\154\141\164\151\154\145", 
"\167\150\151\154\145", null, null, null, null, null, null, null, null, "\173", "\175", "\133", 
"\135", "\73", "\54", "\56", "\75", "\76", "\74", "\41", "\176", "\77", "\72", 
"\75\75", "\74\75", "\76\75", "\41\75", "\174\174", "\46\46", "\53\53", "\55\55", "\53", 
"\55", "\52", "\57", "\46", "\174", "\136", "\45", "\74\74", "\76\76", "\76\76\76", 
"\53\75", "\55\75", "\52\75", "\57\75", "\46\75", "\174\75", "\136\75", "\45\75", 
"\74\74\75", "\76\76\75", "\76\76\76\75", "\141\151\173", "\175\141\151", "\44\141\151", 
"\143\141\163\145\173", "\175\143\141\163\145", "\44\143\141\163\145", "\143\141\164\173", 
"\175\143\141\164", "\44\143\141\164", "\143\154\163\173", "\175\143\154\163", "\44\143\154\163", 
"\145\163\164\155\173", "\175\145\163\164\155", "\44\145\163\164\155", "\145\170\160\173", 
"\175\145\170\160", "\44\145\170\160", "\151\144\173", "\175\151\144", "\44\151\144", 
"\44\156\141\155\145", "\151\155\160\173", "\175\151\155\160", "\44\151\155\160", "\155\157\144\173", 
"\175\155\157\144", "\44\155\157\144", "\155\164\150\173", "\175\155\164\150", "\44\155\164\150", 
"\160\154\163\164\173", "\175\160\154\163\164", "\44\160\154\163\164", "\160\162\147\173", 
"\175\160\162\147", "\163\164\155\173", "\175\163\164\155", "\44\163\164\155", "\44\163\164\162", 
"\164\154\163\164\173", "\175\164\154\163\164", "\44\164\154\163\164", "\164\171\160\173", 
"\175\164\171\160", "\44\164\171\160", "\166\151\173", "\175\166\151", "\44\166\151", 
"\166\154\163\164\173", "\175\166\154\163\164", "\44\166\154\163\164", "\170\154\163\164\173", 
"\175\170\154\163\164", "\44\170\154\163\164", "\141\154\151\141\163", "\141\165\147\155\145\156\164", 
"\145\156\166\151\162\157\156\155\145\156\164", "\160\141\162\145\156\164", "\157\166\145\162\162\151\144\145\163", 
"\162\145\146\151\156\145\163", "\123\157\125\162\103\145", "\122\157\157\124", "\154\141\171\145\162", 
"\123\165\160\145\162", "\163\164\141\164\145\137\155\141\143\150\151\156\145", 
"\114\157\143\141\154\137\111\144", null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         if (jjmatchedPos == 0 && jjmatchedKind > 204)
         {
            jjmatchedKind = 204;
         }
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 12)
         {
            jjmatchedKind = 12;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 12)
         {
            jjmatchedKind = 12;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 12)
         {
            jjmatchedKind = 12;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 7 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                       input_stream.backup(1);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public BaliParserTokenManager(JavaCharStream stream){

      if (JavaCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public BaliParserTokenManager (JavaCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(JavaCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 52; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(JavaCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 4 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_SINGLE_LINE_COMMENT",
   "IN_FORMAL_COMMENT",
   "IN_MULTI_LINE_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 1, 2, 3, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffff8001L, 0xfffffffffd1fffffL, 0xffffffffffffffffL, 0x1fffL, 
};
static final long[] jjtoSkip = {
   0xe3eL, 0x0L, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0xe3eL, 0x0L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x11c0L, 0x0L, 0x0L, 0x0L, 
};
    protected JavaCharStream  input_stream;

    private final int[] jjrounds = new int[52];
    private final int[] jjstateSet = new int[2 * 52];

    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    
    protected char curChar;
}
