// Automatically generated code.  Edit at your own risk!
// Generated by bali2jak v2002.09.03.

package unmixin;

import java.io.*;

import java.util.*;
import Jakarta.util.*;

public class AST_TypeNameList extends AstList {
    static public  AST_TypeNameList MakeAST( String in ) {
        try {
	    Parser parser = Parser.getInstance (new StringReader (in)) ;
	    return (AST_TypeNameList) parser.parse ("AST_TypeNameList") ;
        }
        catch ( ParseException pe ) {
            AstNode.fatalError( "string-to-ast parse error: " + in );
	    return null ;
        }
    }

    // removes name from AST_TypeNameList if it is present.
    // returns modified list as result -- or null if the resulting
    // list is empty.

    public  AST_TypeNameList removeName( String name ) {
        int counter = 0;
        AST_QualifiedName a = null;

        AstCursor c = new  AstCursor();
        for ( c.FirstElement( this ); c.MoreElement(); c.NextElement() ) {

            // if there is a cast error, it's because there should never
            // be anything other than TNClass pointing to an AST_QualifiedName

            try {
                TNClass t = ( TNClass ) c.node;
                QNameType q = ( QNameType ) t.arg[0];
                a = ( AST_QualifiedName ) q.arg[0];
            }
            catch ( Exception e ) {
                AstNode.fatalError( "something other than AST_QualifiedName " + e.getMessage() );
            }
            if ( a.GetName().equals( name ) )
                c.Delete();
            else
                counter++;
        }

        return ( counter != 0 ) ? ( AST_TypeNameList ) this : null ;
    }

}
