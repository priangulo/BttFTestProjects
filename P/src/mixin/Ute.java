// Automatically generated code.  Edit at your own risk!
// Generated by bali2jak v2002.09.03.

package mixin;

import java.util.*;
import Jakarta.util.*;
import java.io.*;

public class Ute extends UnmodifiedTypeDeclaration {

    final public static int ARG_LENGTH = 1 ;
    final public static int TOK_LENGTH = 1 ;

    public AstToken getREFINES () {
        
        return (AstToken) tok [0] ;
    }

    public UnmodifiedTypeExtension getUnmodifiedTypeExtension () {
        
        return (UnmodifiedTypeExtension) arg [0] ;
    }

    public boolean[] printorder () {
        
        return new boolean[] {true, false} ;
    }

    public Ute setParms (AstToken tok0, UnmodifiedTypeExtension arg0) {
        
        arg = new AstNode [ARG_LENGTH] ;
        tok = new AstTokenInterface [TOK_LENGTH] ;
        
        tok [0] = tok0 ;            /* REFINES */
        arg [0] = arg0 ;            /* UnmodifiedTypeExtension */
        
        InitChildren () ;
        return (Ute) this ;
    } 

    @mixin.R4Feature(mixin.R4Feature.CommonError)


    static boolean withinRefines;

    public void checkForErrors( int stage, String file ) {

        // don't report errors if within quoted text

        if ( stage != 0 ) {
            super.checkForErrors( stage, file );
            return;
        }
		  
	// if we get here, we are about to descend into a refinement 
	// at the outermost level

	withinRefines = true;
        super.checkForErrors( stage, file );
        withinRefines = false;
    }

    @mixin.R4Feature(mixin.R4Feature.mixinbase)


    // replace extension syntax with corresponding java syntax

    public  UnmodifiedTypeDeclaration prepareReplace( JTSParseTree t ) {
        UnmodifiedTypeExtension ute = 
                    ( UnmodifiedTypeExtension ) arg[0];
        return ute.prepareReplace( t );
    }

    public boolean isExtension() {
        return true;
    }

}
