// Automatically generated code.  Edit at your own risk!
// Generated by bali2jak v2002.09.03.

package mixin;

public class MethodDcl extends MethodDeclaration {

    final public static int ARG_LENGTH = 5 ;
    final public static int TOK_LENGTH = 1 /* Kludge! */ ;

    public AST_Modifiers getAST_Modifiers () {
        
        AstNode node = arg[0].arg [0] ;
        return (node != null) ? (AST_Modifiers) node : null ;
    }

    public AST_TypeName getAST_TypeName () {
        
        return (AST_TypeName) arg [1] ;
    }

    public MethodDeclSuffix getMethodDeclSuffix () {
        
        return (MethodDeclSuffix) arg [4] ;
    }

    public MethodDeclarator getMethodDeclarator () {
        
        return (MethodDeclarator) arg [2] ;
    }

    public ThrowsClause getThrowsClause () {
        
        AstNode node = arg[3].arg [0] ;
        return (node != null) ? (ThrowsClause) node : null ;
    }

    public boolean[] printorder () {
        
        return new boolean[] {false, false, false, false, false} ;
    }

    public MethodDcl setParms
    (AstOptNode arg0, AST_TypeName arg1, MethodDeclarator arg2, AstOptNode arg3, MethodDeclSuffix arg4)
    {
        
        arg = new AstNode [ARG_LENGTH] ;
        tok = new AstTokenInterface [TOK_LENGTH] ;
        
        arg [0] = arg0 ;            /* [ AST_Modifiers ] */
        arg [1] = arg1 ;            /* AST_TypeName */
        arg [2] = arg2 ;            /* MethodDeclarator */
        arg [3] = arg3 ;            /* [ ThrowsClause] */
        arg [4] = arg4 ;            /* MethodDeclSuffix */
        
        InitChildren () ;
        return (MethodDcl) this ;
    }

    @mixin.R4Feature(mixin.R4Feature.CommonError)


    static boolean seenSUPER; // uppercase
    static boolean seensuper; // lowercase

    public void checkForErrors( int stage, String file ) {

        // don't report errors if within quoted text

        if ( stage != 0 ) {
            super.checkForErrors( stage, file );
            return;
        }
                  
        // if we get here, we are about to descend into a method
        // body at the outermost level

        seenSUPER= false;
        seensuper = false;
        super.checkForErrors( stage, file );

        // here's the error: a method cannot call super and Super.
        // if Super is present, this means that the defined method
        // is a refinement.  the rule is that a method refinement
        // cannot call super (as a mixin translation won't work
        // correctly).

        if ( seenSUPER && seensuper ) {
            // arg[2].arg[0] is QName, arg[2].tok[0] is "("
            // arg[2].tok[h is used to get the line number
            QName q = ( QName ) arg[2].arg[0];
            AstTokenInterface t = arg[2].tok[0];
            AstNode.error( t, "method " + q.GetName() + 
                     " cannot both refine (Super) and invoke super");
        }
    }

}
