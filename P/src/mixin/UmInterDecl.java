// Automatically generated code.  Edit at your own risk!
// Generated by bali2jak v2002.09.03.

package mixin;

import java.util.*;
import Jakarta.util.FixDosOutputStream;
import java.io.*;

public class UmInterDecl extends UnmodifiedInterfaceDeclaration {

    final public static int ARG_LENGTH = 3 ;
    final public static int TOK_LENGTH = 3 ;

    public IntExtClause getIntExtClause () {
        
        AstNode node = arg[1].arg [0] ;
        return (node != null) ? (IntExtClause) node : null ;
    }

    public InterfaceMemberDeclarations getInterfaceMemberDeclarations () {
        
        AstNode node = arg[2].arg [0] ;
        return (node != null) ? (InterfaceMemberDeclarations) node : null ;
    }

    public QName getQName () {
        
        return (QName) arg [0] ;
    }

    public boolean[] printorder () {
        
        return new boolean[] {true, false, false, true, false, true} ;
    }

    public UmInterDecl setParms
    (AstToken tok0, QName arg0, AstOptNode arg1, AstToken tok1, AstOptNode arg2, AstToken tok2)
    {
        
        arg = new AstNode [ARG_LENGTH] ;
        tok = new AstTokenInterface [TOK_LENGTH] ;
        
        tok [0] = tok0 ;            /* "interface" */
        arg [0] = arg0 ;            /* QName */
        arg [1] = arg1 ;            /* [ IntExtClause ] */
        tok [1] = tok1 ;            /* "{" */
        arg [2] = arg2 ;            /* [ InterfaceMemberDeclarations ] */
        tok [2] = tok2 ;            /* "}" */
        
        InitChildren () ;
        return (UmInterDecl) this ;
    }

    @mixin.R4Feature(mixin.R4Feature.mixinInt)


    // this method links extension declaration as a "extends" to
    // the base declaration (whose typedeclaration name) is "name"

    public void extensionOf( String name ) {
        // add "name" to the extension list of this interface

        // Step 1: create an AST_TypeNameList

        AST_TypeNameList tl =  AST_TypeNameList.MakeAST( " " + name + " " );

        // Step 2: now either create an extension and plug it in,
  
        if ( arg[1].arg[0] == null ) {
            AstOptNode aon = ( AstOptNode ) arg[1];
            aon.setParms( new  IntExtClauseC().setParms( new  AstToken().setParms( " ","extends", 0 ),  tl ) );
        }

        // Step 3: or simply concatenate tl with the existing list

        else {
            AST_TypeNameList etnl =
                ( AST_TypeNameList ) arg[1].arg[0].arg[0];
            etnl.add( tl, "," );
        }
    }

    // this mangles the interface name and returns it

    public String getAndMangleName() {
        // get the name of the interface, mangle it, and return the
        // mangled name

        String name = mangleName( getName() );
        setName( name );
        return name;
    }

    public String getName() {
        return arg[0].tok[0].tokenName();
    }

    private void setName( String name ) {
        ( ( AstToken ) arg[0].tok[0] ).setName( name );
    }

}
