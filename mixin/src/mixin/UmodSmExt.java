// Automatically generated code.  Edit at your own risk!
// Generated by bali2jak v2002.09.03.

package mixin;

import java.util.*;
import Jakarta.util.FixDosOutputStream;
import java.io.*;

public class UmodSmExt extends UnmodifiedTypeExtension {

    final public static int ARG_LENGTH = 3 ;
    final public static int TOK_LENGTH = 1 ;

    public ImplementsClause getImplementsClause () {
        
        AstNode node = arg[1].arg [0] ;
        return (node != null) ? (ImplementsClause) node : null ;
    }

    public QName getQName () {
        
        return (QName) arg [0] ;
    }

    public AstToken getSTATE_MACHINE () {
        
        return (AstToken) tok [0] ;
    }

    public SmClassBody getSmClassBody () {
        
        return (SmClassBody) arg [2] ;
    }

    public boolean[] printorder () {
        
        return new boolean[] {true, false, false, false} ;
    }

    public UmodSmExt setParms
    (AstToken tok0, QName arg0, AstOptNode arg1, SmClassBody arg2) {
        
        arg = new AstNode [ARG_LENGTH] ;
        tok = new AstTokenInterface [TOK_LENGTH] ;
        
        tok [0] = tok0 ;            /* STATE_MACHINE */
        arg [0] = arg0 ;            /* QName */
        arg [1] = arg1 ;            /* [ ImplementsClause ] */
        arg [2] = arg2 ;            /* SmClassBody */
        
        InitChildren () ;
        return (UmodSmExt) this ;
    }

    @mixin.R4Feature(mixin.R4Feature.mixinSm)


    // return SM declaration that has no extends clause -- yes,
    // even though we know (ultimately) that it will extend another
    // SM.  That part is filled in by the extensionOf method defined above

    public  UnmodifiedTypeDeclaration prepareReplace( JTSParseTree t ) {

        // Step 1: create the replacement class declaration (with
        //         empty extends clause

        UmodSmDecl ucd = new  UmodSmDecl()
                .setParms( ( AstToken ) tok[0], ( QName ) arg[0], 
                    new  AstOptNode(), ( AstOptNode ) arg[1], 
                    ( SmClassBody ) arg[2] );

        // Step 2: set the source of this new node to be equal to 
        //         that of the original

        ucd._source = getSource();

        // Step 3: also, take the comment of the original node
        //         and preface it onto this new node

        ucd.prependComment( up.getComment() );

        // Step 4: return final result

        return ucd;
    }

}
