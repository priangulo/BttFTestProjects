// Automatically generated code.  Edit at your own risk!
// Generated by bali2jak v2002.09.03.

package mixin;

import java.util.*;
import Jakarta.util.FixDosOutputStream;
import java.io.*;

public class UmodSmDecl extends SmDeclaration {

    final public static int ARG_LENGTH = 4 ;
    final public static int TOK_LENGTH = 1 ;

    public ImplementsClause getImplementsClause () {
        
        AstNode node = arg[2].arg [0] ;
        return (node != null) ? (ImplementsClause) node : null ;
    }

    public QName getQName () {
        
        return (QName) arg [0] ;
    }

    public AstToken getSTATE_MACHINE () {
        
        return (AstToken) tok [0] ;
    }

    public SmClassBody getSmClassBody () {
        
        return (SmClassBody) arg [3] ;
    }

    public SmExtendsClause getSmExtendsClause () {
        
        AstNode node = arg[1].arg [0] ;
        return (node != null) ? (SmExtendsClause) node : null ;
    }

    public boolean[] printorder () {
        
        return new boolean[] {true, false, false, false, false} ;
    }

    public UmodSmDecl setParms
    (AstToken tok0, QName arg0, AstOptNode arg1, AstOptNode arg2, SmClassBody arg3)
    {
        
        arg = new AstNode [ARG_LENGTH] ;
        tok = new AstTokenInterface [TOK_LENGTH] ;
        
        tok [0] = tok0 ;            /* STATE_MACHINE */
        arg [0] = arg0 ;            /* QName */
        arg [1] = arg1 ;            /* [ SmExtendsClause ] */
        arg [2] = arg2 ;            /* [ ImplementsClause ] */
        arg [3] = arg3 ;            /* SmClassBody */
        
        InitChildren () ;
        return (UmodSmDecl) this ;
    }

    @mixin.R4Feature(mixin.R4Feature.mixinSm)


    // this method links extension declaration as a "extends" to
    // the base declaration (whose typedeclaration name) is "name"

    public void extensionOf( String name ) {
        // add "name" to the extension list of this interface

        // Step 1: create an AST_QualifiedName

        AST_QualifiedName tl =  AST_QualifiedName.Make( " " + name + " " );

        // Step 2: now create an extension and plug it in
  
        if ( arg[1].arg[0] == null ) {
            AstOptNode aon = ( AstOptNode ) arg[1];
            aon.setParms( new  ExtClause().setParms( new  AstToken().setParms( " ","extends", 0 ),  tl ) );
        }
        else {
            AstNode.fatalError( tok[0], "state_machine " + getName() + 
                        " already has an extends clause" );
        }
    }

    // this mangles the state machine name, mangles the name of constructors
    // and returns the mangled name

    public String getAndMangleName() {
        // get the name of the interface, mangle it, and return the
        // mangled name

        String name = mangleName( getName() );
        setName( name );

        AST_FieldDecl f = ( ( AST_FieldDecl ) arg[3].arg[4].arg[0] );
        if ( f != null )
            f.mangleConstructors();

        return name;
    }

    public String getName() {
        return arg[0].tok[0].tokenName();
    }

    private void setName( String name ) {
        ( ( AstToken ) arg[0].tok[0] ).setName( name );
    }

}
