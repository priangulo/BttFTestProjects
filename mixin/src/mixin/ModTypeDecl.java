// Automatically generated code.  Edit at your own risk!
// Generated by bali2jak v2002.09.03.

package mixin;

import java.util.*;
import Jakarta.util.*;
import java.io.*;

public class ModTypeDecl extends TypeDeclaration {

    final public static int ARG_LENGTH = 2 ;
    final public static int TOK_LENGTH = 1 /* Kludge! */ ;

    public AST_Modifiers getAST_Modifiers () {
        
        AstNode node = arg[0].arg [0] ;
        return (node != null) ? (AST_Modifiers) node : null ;
    }

    public UnmodifiedTypeDeclaration getUnmodifiedTypeDeclaration () {
        
        return (UnmodifiedTypeDeclaration) arg [1] ;
    }

    public boolean[] printorder () {
        
        return new boolean[] {false, false} ;
    }

    public ModTypeDecl setParms (AstOptNode arg0, UnmodifiedTypeDeclaration arg1)
    {
        
        arg = new AstNode [ARG_LENGTH] ;
        tok = new AstTokenInterface [TOK_LENGTH] ;
        
        arg [0] = arg0 ;            /* [ AST_Modifiers ] */
        arg [1] = arg1 ;            /* UnmodifiedTypeDeclaration */
        
        InitChildren () ;
        return (ModTypeDecl) this ;
    }

    @mixin.R4Feature(mixin.R4Feature.mixinbase)


    // replaces extension TypeDeclaration with Java counterpart

    public  TypeDeclaration prepareReplace( JTSParseTree t ) {
        UnmodifiedTypeDeclaration utd;

        utd = ( UnmodifiedTypeDeclaration ) arg[1];
        utd.Replace( utd.prepareReplace( t ) );
        return ( TypeDeclaration ) this;
    }

    public boolean isExtension() {
        return ( ( UnmodifiedTypeDeclaration ) arg[1] ).isExtension();
    }

    public void extensionOf( String name ) {
        ( ( UnmodifiedTypeDeclaration ) arg[1] ).extensionOf( name );
    }

    public String getAndMangleName() {
        return ( ( UnmodifiedTypeDeclaration ) arg[1] ).getAndMangleName();
    }

    public String getName() {
        return ( ( UnmodifiedTypeDeclaration ) arg[1] ).getName();
    }

    // set the modifier list to be {abstract}

    public void setAbstractModifier() {
        String com = getComment();
        ModAbstract ma = new  ModAbstract().setParms( new  AstToken().setParms( " ","abstract", 0 ) );
        arg[0].Replace( new  AST_Modifiers().add( new  AST_ModifiersElem().setParms( ma ) ) );
        arg[0].setComment( com );
        arg[1].setComment( " " );
    }

    // set the modifier list to m

    public void addModifiers( AST_Modifiers m ) {

        // Step 1: if m is null, return immediately

        if ( m == null )
            return;

        // Step 2: if original modifierlist is empty
        //         move the comment to the new modifier list

        AST_Modifiers a = ( AST_Modifiers ) arg[0].arg[0];
        String com = getComment();
        if ( a == null ) {
            setComment( " " );
            arg[0].Replace( m );
            setComment( com );
            return;
        }

        // Step 2: original list is not empty -- go ahead and
        //         add each new modifier, one at a time

        AstCursor c = new  AstCursor();
        for ( c.FirstElement( m ); c.MoreElement(); c.NextElement() )
            a.addModifier( ( Modifier ) c.node );
        arg[0].setComment( com );
        arg[1].setComment( " " );
    }

    public  AST_Modifiers getModifier() {
        return ( AST_Modifiers ) arg[0].arg[0];
    }

}
