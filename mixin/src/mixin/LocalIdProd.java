// Automatically generated code.  Edit at your own risk!
// Generated by bali2jak v2002.09.03.

package mixin;

import java.util.Hashtable;
import Jakarta.util.Util2;
import java.io.*;

public class LocalIdProd extends TypeDeclaration {

    final public static int ARG_LENGTH = 1 ;
    final public static int TOK_LENGTH = 2 ;

    public QNameList getQNameList () {
        
        return (QNameList) arg [0] ;
    }

    public boolean[] printorder () {
        
        return new boolean[] {true, false, true} ;
    }

    public LocalIdProd setParms (AstToken tok0, QNameList arg0, AstToken tok1) {
        
        arg = new AstNode [ARG_LENGTH] ;
        tok = new AstTokenInterface [TOK_LENGTH] ;
        
        tok [0] = tok0 ;            /* "Local_Id" */
        arg [0] = arg0 ;            /* QNameList */
        tok [1] = tok1 ;            /* ";" */
        
        InitChildren () ;
        return (LocalIdProd) this ;
    }

    @mixin.R4Feature(mixin.R4Feature.LocalId)


    public void harvestLocalIds() {
        AstCursor c = new  AstCursor();

        // Step 1: for each QName on the id-list, add its 
        //         identifier and mangled-identifier to the hash table

        for ( c.FirstElement( arg[0] ); c.MoreElement(); c.NextElement() ) {
            QName q = ( QName ) c.node;
            String id = q.tok[0].tokenName();
            kernelConstants.globals().localId_ht.put( id, Util2.mangleId( id, _source ) );
        }
    }

    public void setParms( AstNode n ) {
        // this method is likely only to be called when typesorting
        // is performed-- localids should never be part of type sorting

        AstNode.fatalError( "LocalIdProd.setParms should never be called" );
    }

}
